/**
 * Fetches and displays chapters and topics for a given subject.
 * @param {object} _this - Reference to the current context.
 * @param {string} subject_name - Name of the subject to display.
 * @param {string} target_chapter_name - Optional. Name of the target chapter to highlight.
 * @param {string} target_topic_name - Optional. Name of the target topic to highlight.
 * @returns {boolean} Indicates success (true) or failure (false) of the operation.
 */
export async function show_chapter(_this, subject_name, target_chapter_name, target_topic_name) {
    
    // Display loading indication
    addBottomLoading('#nav');
    _this.showStatus(`..loading subject ${subject_name}`, false);

    // Retrieve subject data from repository
    let subObj = await _this.userRepo.getFile(`${subject_name}.json`, 'subjects');
    let subjectContent;

    try {
        // Parse and decode subject content
        let decodedContent = base64ToUtf8(subObj.content);
        subjectContent = JSON.parse(decodedContent);
    } catch (err) {
        console.log(err);
        // Handle parsing error
        html('#chapter-container .chapter-accordions', '');
        removeBottomLoading('#nav');
        return false;
    }

    // Handle corrupt file or empty content
    if (!subjectContent) {
        _this.showToast('corrupt file', 'triangle-exclamation');
        _this.showStatus(`failed`, false);
        removeBottomLoading('#nav');
        return false;
    }

    // Display subject name
    text('#chapter-header-title', subject_name);
    _this.current_subject = subjectContent;

    // Handle case where no chapters are found
    if (subjectContent.chapters.length === 0) {
        html('.chapter-accordions', `<h4 class='text-center text-light'>create new subject here</h4>`);
        _this.showStatus(`no chapter found`, true);
        removeBottomLoading('#nav');

        // Hide left sidebar if shown
        let leftSideBar = get('#offcanvas-leftSideBar');
        if (leftSideBar.classList.contains('show')) {
            let x = bootstrap.Offcanvas.getInstance(leftSideBar);
            x.hide();
        }
        return false;
    }

    let allChapterHtml = '';
    let chapterAccordion = get('#chapter-container .chapter-accordions');

    // Iterate through each chapter
    subjectContent.chapters.forEach(eachChapter => {
        let is_target_chapter = target_chapter_name && target_chapter_name === eachChapter.chapter_name ? 'true' : 'false';
        let total_topic = 0;
        let total_topic_html = '';

        // Calculate total topics for the chapter
        if (_this.user_data.topics.length !== 0) {
            _this.user_data.topics.forEach(eachTopic => {
                if (eachTopic.chapter === eachChapter.chapter_name) {
                    total_topic++;
                }
            });
        }

        // Prepare total topics HTML
        total_topic_html = total_topic === 0 ? '' : `<span class='mx-2 flex-shrink-0 fnx-8 text-light'>${total_topic}</span>`;
        let chapterName = eachChapter.chapter_name;
        let topicHtml = '';

        // Iterate through each topic in the chapter
        if (eachChapter.topics.length >= 1) {
            eachChapter.topics.forEach(eachTopic => {
                let is_target_topic = target_topic_name && target_topic_name === eachTopic.topic_name ? 'true' : 'false';
                let last_visited_html = '';
                let last_visited_date;

                // Retrieve last visited date for the topic if available
                if (_this.user_data && _this.user_data.topics.length !== 0) {
                    _this.user_data.topics.forEach(topic => {
                        if (topic.id === eachTopic.topic_id) {
                            last_visited_date = topic.last_visited;
                        }
                    });
                }

                // Prepare last visited HTML
                last_visited_html = last_visited_date ? `<span class="flex-shrink-0 fnx-8 fw-400"><i class="fa-solid fa-clock-rotate-left me-1"></i><span>${getTimeGap(last_visited_date)}</span>` : '';

                // Prepare topic HTML
                topicHtml += `<button class="each-topic btn w-100 text-start d-flex justify-content-between align-items-center box-hover rounded-1 text-truncate" data-bs-toggle='modal' data-bs-target='#modal-content' data-is-target='${is_target_topic}' data-topic='${eachTopic.topic_name}'><p class="flex-grow-1 topic-title" data-topic='${eachTopic.topic_name}'>${eachTopic.topic_name}</p>${last_visited_html}</button>`;
            });
        }

        // Build HTML for each chapter and its topics
        allChapterHtml += `<div class="accordion-item each-chapter" data-is-target='${is_target_chapter}' data-chapter='${chapterName}'><h2 class="accordion-header"><button class="accordion-button collapsed ps-1 d-flex justify-content-between align-items-center" data-chapter='${chapterName}' type="button" data-bs-toggle="collapse" aria-expanded="false"><p data-chapter='${chapterName}' class="chapter-title text-truncate flex-grow-1">${chapterName}</p>${total_topic_html}</button></h2><div class="accordion-collapse collapse"><div class="accordion-body box-bg"><header class="text-end mb-1"><i class="topic-addBtn fa-solid fa-plus fs-5 i-btn rounded-circle"></i></header><div class="topic-list">${topicHtml}</div></div></div></div>`;
    });

    // Render all chapters and topics HTML
    html(chapterAccordion, allChapterHtml);

    // Hide left sidebar if shown
    let leftSideBar = get('#offcanvas-leftSideBar');
    if (leftSideBar.classList.contains('show')) {
        let x = bootstrap.Offcanvas.getInstance(leftSideBar);
        x.hide();
    }

    // Clear loading indication and show success status
    _this.showStatus(``, true);
    setAccordionItemAutoId('.chapter-accordions');
    removeBottomLoading('#nav');
    return true;
}
